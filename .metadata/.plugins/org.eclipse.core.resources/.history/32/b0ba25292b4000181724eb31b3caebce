package edu.uqam.inf5153.tp3.fondation;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
/*
 * Le  code provient de
 * https://stackoverflow.com/questions/34515560/compare-two-hashed-password-using-same-salt-using-sha-256-algorith-in-java-spri
 * 
 * */
public class CryptWithSalt {

		
	    private static CryptWithSalt instance;
	    private final static int ITERATION_COUNT = 5;

	    private CryptWithSalt() {  }

	    public static synchronized CryptWithSalt getInstance() {
	        if (instance == null) {
	        	CryptWithSalt returnPasswordEncoder = new CryptWithSalt();
	            return returnPasswordEncoder;
	        }
	        else
	            return instance;
	    }

	    public synchronized String encode(String password)throws NoSuchAlgorithmException, IOException {
	    	String saltKey = "PveFT7isDjGYFTaYhc2Fzw==";
	        String encodedPassword = null;
	        byte[] salt = base64ToByte(saltKey);

	        MessageDigest digest = MessageDigest.getInstance("SHA-256");
	        digest.reset();
	        digest.update(salt);

	        byte[] btPass = digest.digest(password.getBytes("UTF-8"));
	        for (int i = 0; i < ITERATION_COUNT; i++) {
	            digest.reset();
	            btPass = digest.digest(btPass);
	        }

	        encodedPassword = byteToBase64(btPass);
	        return encodedPassword;
	    }

	    private byte[] base64ToByte(String str) throws IOException {
	        BASE64Decoder decoder = new BASE64Decoder();
	        byte[] returnbyteArray = decoder.decodeBuffer(str);
	        return returnbyteArray;
	    }

	    private String byteToBase64(byte[] bt) {
	        BASE64Encoder endecoder = new BASE64Encoder();
	        String returnString = endecoder.encode(bt);
	        return returnString;
	    }
	    
	    
	    public static String encrypt(String strClearText ) throws Exception{
	    	String strData="";
	    	String strKey = "PveFT7isDjGYFTaYhc2Fzw==";
	    	try {
	    		SecretKeySpec skeyspec=new SecretKeySpec(strKey.getBytes(),"Blowfish");
	    		Cipher cipher=Cipher.getInstance("Blowfish");
	    		cipher.init(Cipher.ENCRYPT_MODE, skeyspec);
	    		byte[] encrypted=cipher.doFinal(strClearText.getBytes());
	    		strData=new String(encrypted);
	    		
	    	} catch (Exception e) {
	    		e.printStackTrace();
	    		throw new Exception(e);
	    	}
	    	return strData;
	    }
	    public static String decrypt(String strEncrypted) throws Exception{
	    	String strData="";
	    	String strKey = "PveFT7isDjGYFTaYhc2Fzw==";
	    	try {
	    		SecretKeySpec skeyspec=new SecretKeySpec(strKey.getBytes(),"Blowfish");
	    		Cipher cipher=Cipher.getInstance("Blowfish");
	    		cipher.init(Cipher.DECRYPT_MODE, skeyspec);
	    		byte[] decrypted=cipher.doFinal(strEncrypted.getBytes());
	    		strData=new String(decrypted);
	    		
	    	} catch (Exception e) {
	    		e.printStackTrace();
	    		throw new Exception(e);
	    	}
	    	return strData;
	    }

	    
	    


}
